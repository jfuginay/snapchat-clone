# 🤖 TribeFind Android Development Setup Guide

## 📋 Prerequisites Checklist
- [ ] Node.js 18+ installed
- [ ] Expo CLI installed (`npm install -g @expo/cli`)
- [ ] Java 11+ installed (for Android Studio)
- [ ] 8GB+ RAM (recommended for emulator)
- [ ] 10GB+ free disk space

## 🚀 Step 1: Install Android Studio

### macOS Installation:
```bash
# Option 1: Download from official site
# Go to: https://developer.android.com/studio
# Download Android Studio and install

# Option 2: Using Homebrew (if you have it)
brew install --cask android-studio
```

### Windows Installation:
```bash
# Download from: https://developer.android.com/studio
# Run the installer and follow setup wizard
```

### Linux Installation:
```bash
# Download from: https://developer.android.com/studio
# Extract and run: ./studio.sh
```

## 🔧 Step 2: Android Studio Setup

### During First Launch:
1. **Accept licenses** - Click "Accept" for all license agreements
2. **Choose Custom Installation** - Don't use Express
3. **Select Components**:
   - ✅ Android SDK
   - ✅ Android SDK Platform
   - ✅ Android Virtual Device
   - ✅ Performance (Intel HAXM on Windows/Linux, Hypervisor.Framework on macOS)

### SDK Manager Setup:
1. Open Android Studio
2. Go to **Tools → SDK Manager** (or configure icon)
3. **SDK Platforms Tab** - Install these:
   - ✅ Android 14 (API 34) - Latest
   - ✅ Android 13 (API 33) - Stable
   - ✅ Android 12 (API 31) - Compatibility
   - ✅ Android 11 (API 30) - Legacy support

4. **SDK Tools Tab** - Ensure these are installed:
   - ✅ Android SDK Build-Tools (latest)
   - ✅ Android Emulator
   - ✅ Android SDK Platform-Tools
   - ✅ Intel x86 Emulator Accelerator (if Intel CPU)

## 📱 Step 3: Create Android Virtual Device (AVD)

### Create TribeFind Test Emulator:
```bash
# Open AVD Manager in Android Studio
# Tools → AVD Manager → Create Virtual Device

# Recommended Device Configuration:
Device: Pixel 7 Pro (or Pixel 6)
System Image: Android 13 (API 33) - x86_64 with Google APIs
RAM: 4GB (minimum), 8GB (recommended)
Storage: 8GB
Graphics: Hardware - GLES 2.0
```

### Manual AVD Creation (Command Line):
```bash
# List available system images
avdmanager list target

# Create AVD for TribeFind
avdmanager create avd \
  -n "TribeFind_Test_Device" \
  -k "system-images;android-33;google_apis;x86_64" \
  -d "pixel_7_pro"

# Configure AVD settings
echo "hw.ramSize=4096" >> ~/.android/avd/TribeFind_Test_Device.avd/config.ini
echo "disk.dataPartition.size=8G" >> ~/.android/avd/TribeFind_Test_Device.avd/config.ini
```

## 🌍 Step 4: Environment Variables

### macOS/Linux (.zshrc or .bash_profile):
```bash
# Android SDK paths
export ANDROID_HOME=$HOME/Android/Sdk
# Alternative path for macOS:
# export ANDROID_HOME=$HOME/Library/Android/sdk

export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin

# Java (if needed)
export JAVA_HOME=/Applications/Android\ Studio.app/Contents/jre/jdk/Contents/Home
```

### Windows (Environment Variables):
```cmd
# Add these to System Environment Variables:
ANDROID_HOME = C:\Users\%USERNAME%\AppData\Local\Android\Sdk
JAVA_HOME = C:\Program Files\Android\Android Studio\jre

# Add to PATH:
%ANDROID_HOME%\emulator
%ANDROID_HOME%\platform-tools
%ANDROID_HOME%\cmdline-tools\latest\bin
```

### Apply Environment Changes:
```bash
# macOS/Linux - reload shell configuration
source ~/.zshrc
# or
source ~/.bash_profile

# Verify installation
adb --version
emulator -list-avds
```

## 🎮 Step 5: Launch TribeFind on Android

### Quick Start Commands:
```bash
# 1. List available emulators
emulator -list-avds

# 2. Start TribeFind test emulator (background)
emulator @TribeFind_Test_Device &

# 3. Wait for emulator to boot (2-3 minutes first time)
# You'll see the Android home screen when ready

# 4. Start TribeFind development server
cd /path/to/tribefind
npx expo start

# 5. Press 'a' in terminal to open on Android
# Or run directly:
npx expo start --android
```

### Alternative Direct Launch:
```bash
# Start emulator and app in one command
emulator @TribeFind_Test_Device & npx expo start --android
```

## 🔧 Step 6: Emulator Optimization

### Performance Settings:
```bash
# Create optimized AVD
avdmanager create avd \
  -n "TribeFind_Performance" \
  -k "system-images;android-33;google_apis;x86_64" \
  -d "pixel_6" \
  --tag "google_apis"

# Configure for better performance
echo "hw.ramSize=6144" >> ~/.android/avd/TribeFind_Performance.avd/config.ini
echo "hw.accelerometer=yes" >> ~/.android/avd/TribeFind_Performance.avd/config.ini
echo "hw.gps=yes" >> ~/.android/avd/TribeFind_Performance.avd/config.ini
echo "hw.camera=yes" >> ~/.android/avd/TribeFind_Performance.avd/config.ini
echo "hw.camera.front=webcam0" >> ~/.android/avd/TribeFind_Performance.avd/config.ini
```

### Emulator Startup Options:
```bash
# Fast boot (saves emulator state)
emulator @TribeFind_Test_Device -no-snapshot-load

# With increased RAM allocation
emulator @TribeFind_Test_Device -memory 4096

# With GPU acceleration
emulator @TribeFind_Test_Device -gpu host

# Cold boot (fresh start)
emulator @TribeFind_Test_Device -no-snapshot
```

## 🧪 Step 7: Test TribeFind Features

### Features to Test on Android:
```bash
# 1. Start app and check console for Android-specific logs
npx expo start --android

# 2. Test TribeFind features:
# - Authentication (email signup/login)
# - Camera functionality (hardware camera access)
# - Location services (GPS simulation)
# - Photo gallery (storage permissions)
# - Map functionality (Google Maps integration)
# - Push notifications (Android notification system)
```

### Android-Specific Testing:
```bash
# Test with different Android API levels
emulator @TribeFind_Test_Device -api-level 30
emulator @TribeFind_Test_Device -api-level 33

# Test with different screen densities
emulator @TribeFind_Test_Device -skin 1440x2960

# Test location features
# In emulator: Settings → Location → Use GPS satellites
```

## 🚨 Troubleshooting

### Common Issues & Solutions:

**"HAXM not installed" (Intel CPUs):**
```bash
# Install Intel HAXM manually
# Download from: https://github.com/intel/haxm/releases
# Or through SDK Manager: SDK Tools → Intel x86 Emulator Accelerator
```

**"Emulator not starting":**
```bash
# Check virtualization is enabled in BIOS
# For macOS: System Preferences → Security → Allow System Extensions

# Clear emulator data
emulator @TribeFind_Test_Device -wipe-data

# Check available memory
emulator -list-avds -verbose
```

**"App not installing":**
```bash
# Check adb connection
adb devices

# Restart adb server
adb kill-server
adb start-server

# Clear Expo cache
npx expo start --clear
```

**Performance Issues:**
```bash
# Allocate more RAM to emulator
echo "hw.ramSize=8192" >> ~/.android/avd/TribeFind_Test_Device.avd/config.ini

# Use hardware acceleration
emulator @TribeFind_Test_Device -gpu host -accel on
```

## 📊 Verification Checklist

- [ ] Android Studio installed and licensed
- [ ] SDK platforms installed (API 30, 31, 33, 34)
- [ ] AVD created and boots successfully
- [ ] Environment variables configured
- [ ] `adb devices` shows emulator when running
- [ ] `npx expo start --android` launches TribeFind
- [ ] TribeFind loads without errors on Android
- [ ] Camera permission dialog appears
- [ ] Location permission dialog appears
- [ ] Can create account and navigate between screens

## 🎯 Success! 

Your Android development environment is ready! 

TribeFind should now launch on your Android emulator with full access to:
- 📸 Camera functionality
- 📍 GPS location services  
- 🗺️ Google Maps integration
- 📱 Native Android UI components
- 🔔 Push notifications (when implemented)

**Next step**: Run `emulator @TribeFind_Test_Device & npx expo start --android` and enjoy testing TribeFind on Android! 🚀

## 💡 Pro Tips

1. **Multiple Emulators**: Create different AVDs for testing various screen sizes and Android versions
2. **Snapshot Feature**: Enable snapshots for faster emulator startup
3. **Hardware Features**: Configure camera, GPS, and sensors for realistic testing
4. **Performance**: Close other apps while running emulator for better performance
5. **Updates**: Keep Android Studio and SDK tools updated for best compatibility

---
**Built for TribeFind - Where Innovation Meets Community** 🎯
